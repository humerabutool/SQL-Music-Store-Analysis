-- who is the senior most employee based on the job title --

SELECT * 
FROM employee
Order by levels desc
LIMIT 1;

-- which countries have the most invoices -- 
SELECT COUNT(invoice_id) AS C, billing_country
FROM invoice
GROUP BY billing_country
ORDER BY c DESC
;

-- what are the top 3 values of total invoices? 
SELECT total FROM invoice
ORDER BY total DESC
LIMIT 3;

-- which city has the best customers? 
-- we would like to throw a promotional Music festival in the city we made the most money in
-- write a query that returns one city that has highest sum of invoice totals.
-- return both city name and sum of all invoice totals.

SELECT SUM(total) AS invoice_total, billing_city
FROM invoice
GROUP BY billing_city
ORDER BY invoice_total DESC
LIMIT 1;

-- Who is the best customer?
-- the customer who has spent the most money will be declared the best customer.
-- Write a query that returns the person who has spent the most money

SELECT c.customer_id, c.first_name, c.last_name, SUM(i.total) AS total
FROM customer AS c
INNER JOIN invoice AS i ON
c.customer_id=i.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total desc
LIMIT 1;

-- write a query to return the email, first name, last name and genre of all rock music listeners
-- return your list ordered alphabetically starting with A 

SELECT DISTINCT c.first_name, c.last_name, c.email
FROM customer AS c
JOIN invoice AS i ON c.customer_id = i.customer_id
JOIN invoice_line AS il ON i.invoice_id = il.invoice_id
WHERE track_id IN(
	SELECT track_id FROM track AS t
	JOIN genre AS g ON t.genre_id = g.genre_id
    WHERE g.name LIKE 'Rock'
)
ORDER BY email
;

-- Let's invite the artists who have written the most rock music in our dataset
-- write a query that returns the artist name and total track count of the top 10 rock bands

SELECT artist.artist_id, artist.name, COUNT(track.name) AS total_track
FROM artist
JOIN album2 ON album2.artist_id = artist.artist_id
JOIN track ON track.album_id = album2.album_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name LIKE 'Rock'
GROUP BY artist.artist_id, artist.name
ORDER BY total_track DESC
LIMIT 10;

-- return all the track names that have a song length longer than the average song length
-- return name and millisecnds for each track
-- order by song length with longest songs listed first
SELECT name, milliseconds
FROM track
WHERE milliseconds > (
	select avg(milliseconds) AS avg_track_length
    FROM track)
ORDER BY milliseconds DESC;

-- ADVANCED --
-- find how much amount is spent by each customr on the artists
-- write a query to return customer name, artist name and total amount spent

WITH best_selling_artist AS (
	SELECT artist.artist_id, artist.name, SUM(invoice_line.unit_price*invoice_line.quantity) AS total_sales
    FROM invoice_line
    JOIN track ON invoice_line.track_id = track.track_id
    JOIN album2 ON track.album_id =album2.album_id
    JOIN artist ON album2.artist_id = artist.artist_id
    GROUP BY 1,2
    ORDER BY total_sales DESC
    LIMIT 1
)

SELECT c.customer_id, c.first_name, c.last_name, bsa.name, SUM(inl.unit_price*inl.quantity) AS amount_spent
FROM invoice AS i
JOIN customer AS c ON c.customer_id=i.customer_id
JOIN invoice_line AS inl ON inl.invoice_id = i.invoice_id
JOIN track AS t ON t.track_id = inl.track_id
JOIN album2 AS a ON a.album_id = t.album_id
JOIN best_selling_artist AS bsa ON bsa.artist_id = a.artist_id
GROUP BY 1,2,3,4
ORDER BY amount_spent DESC;

-- find out the most popular music genre for each country. 
-- the most popular music genre is with the highest amount of purchases
-- write a query that returns each country with the top genre
-- for countries where the max no. of purchases  is shared return all genres

WITH popular_genre AS (
	SELECT genre.genre_id, 
    genre.name AS genre_name,
    customer.country, 
    COUNT(invoice_line.quantity) AS purchases,
	ROW_NUMBER() OVER(PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity) DESC) AS row_no
    FROM invoice_line
    JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
    JOIN customer ON customer.customer_id = invoice.customer_id
    JOIN track ON track.track_id = invoice_line.track_id
    JOIN genre ON genre.genre_id = track.genre_id
    GROUP BY 3,2,1
    ORDER BY 3 ASC , purchases DESC
)
SELECT * 
FROM popular_genre
WHERE row_no <=1
